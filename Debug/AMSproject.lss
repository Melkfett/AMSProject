
AMSproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  00800200  00800200  00000446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001261  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec7  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ad  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006da  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032c  00000000  00000000  0000353a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003866  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	ae c0       	rjmp	.+348    	; 0x1a2 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ae 3c       	cpi	r26, 0xCE	; 206
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	08 d0       	rcall	.+16     	; 0x116 <main>
 106:	63 c1       	rjmp	.+710    	; 0x3ce <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <testfunc1>:
#include "../include/UARTDriver.h"
#include "../include/RTSmodule.h"

void testfunc1()
{
	UARTTransmitByte('B');
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	3e c1       	rjmp	.+636    	; 0x38a <UARTTransmitByte>
 10e:	08 95       	ret

00000110 <testfunc2>:
}

void testfunc2()
{
	UARTTransmitByte('A');
 110:	81 e4       	ldi	r24, 0x41	; 65
 112:	3b c1       	rjmp	.+630    	; 0x38a <UARTTransmitByte>
 114:	08 95       	ret

00000116 <main>:
}

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	60 97       	sbiw	r28, 0x10	; 16
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	UARTSetup();
 12a:	1f d1       	rcall	.+574    	; 0x36a <UARTSetup>
	RTSInit();
 12c:	6c d0       	rcall	.+216    	; 0x206 <RTSInit>
 12e:	85 e8       	ldi	r24, 0x85	; 133
	
	task_t test_task1;
	test_task1.task_cbf = testfunc1;
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9f 83       	std	Y+7, r25	; 0x07
 134:	8e 83       	std	Y+6, r24	; 0x06
 136:	0f 2e       	mov	r0, r31
	test_task1.ticks = 1000;
 138:	f8 ee       	ldi	r31, 0xE8	; 232
 13a:	cf 2e       	mov	r12, r31
 13c:	f3 e0       	ldi	r31, 0x03	; 3
 13e:	df 2e       	mov	r13, r31
 140:	e1 2c       	mov	r14, r1
 142:	f1 2c       	mov	r15, r1
 144:	f0 2d       	mov	r31, r0
 146:	ca 82       	std	Y+2, r12	; 0x02
 148:	db 82       	std	Y+3, r13	; 0x03
 14a:	ec 82       	std	Y+4, r14	; 0x04
 14c:	fd 82       	std	Y+5, r15	; 0x05
 14e:	ce 01       	movw	r24, r28
	RTSAddTask(&test_task1);
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	6a d0       	rcall	.+212    	; 0x228 <RTSAddTask>
 154:	88 e8       	ldi	r24, 0x88	; 136
	
	task_t test_task2;
	test_task2.task_cbf = testfunc2;
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	9f 87       	std	Y+15, r25	; 0x0f
 15a:	8e 87       	std	Y+14, r24	; 0x0e
 15c:	ca 86       	std	Y+10, r12	; 0x0a
	test_task2.ticks = 1000;
 15e:	db 86       	std	Y+11, r13	; 0x0b
 160:	ec 86       	std	Y+12, r14	; 0x0c
 162:	fd 86       	std	Y+13, r15	; 0x0d
	RTSAddTask(&test_task2);
 164:	ce 01       	movw	r24, r28
 166:	09 96       	adiw	r24, 0x09	; 9
 168:	5f d0       	rcall	.+190    	; 0x228 <RTSAddTask>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	33 ed       	ldi	r19, 0xD3	; 211
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	21 50       	subi	r18, 0x01	; 1
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x5a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x64>
 17a:	00 00       	nop
	
	_delay_ms(1000);
	sei();
 17c:	78 94       	sei
	RTSRun();
 17e:	6e d0       	rcall	.+220    	; 0x25c <RTSRun>
 180:	9a ea       	ldi	r25, 0xAA	; 170
 182:	26 ee       	ldi	r18, 0xE6	; 230
 184:	36 e9       	ldi	r19, 0x96	; 150
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	91 50       	subi	r25, 0x01	; 1
 18a:	20 40       	sbci	r18, 0x00	; 0
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	d9 f7       	brne	.-10     	; 0x188 <main+0x72>

	_delay_ms(10000);

	uint8_t msg1 = 'A';

	UARTTransmitByte(msg1);
 192:	00 00       	nop
 194:	81 e4       	ldi	r24, 0x41	; 65

	uint8_t msg2 = '\n';

	UARTTransmitByte(msg2);
 196:	f9 d0       	rcall	.+498    	; 0x38a <UARTTransmitByte>
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	f7 d0       	rcall	.+494    	; 0x38a <UARTTransmitByte>

	UARTTransmitByte(msg1);
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	f5 d0       	rcall	.+490    	; 0x38a <UARTTransmitByte>
 1a0:	ef cf       	rjmp	.-34     	; 0x180 <main+0x6a>

000001a2 <__vector_17>:

static volatile task_t* task_queue[MAX_QUEUE_LENGTH];
static volatile int8_t crt_queue_size = 0;

ISR(TIMER1_COMPA_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
	
	/*check if the next task should be scheduled*/
	if (tick_countdown == 0)
 1b4:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <tick_countdown>
 1b8:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <tick_countdown+0x1>
 1bc:	a0 91 cc 02 	lds	r26, 0x02CC	; 0x8002cc <tick_countdown+0x2>
 1c0:	b0 91 cd 02 	lds	r27, 0x02CD	; 0x8002cd <tick_countdown+0x3>
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	a1 05       	cpc	r26, r1
 1c8:	b1 05       	cpc	r27, r1
 1ca:	21 f4       	brne	.+8      	; 0x1d4 <__vector_17+0x32>
	{
		RTSTaskState = Timeout;
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <RTSTaskState>
 1d2:	10 c0       	rjmp	.+32     	; 0x1f4 <__vector_17+0x52>
		//UARTTransmitByte('I');
	}

	/*decrement the tick counter if still positive*/
	if(tick_countdown > 0)
 1d4:	18 16       	cp	r1, r24
 1d6:	19 06       	cpc	r1, r25
 1d8:	1a 06       	cpc	r1, r26
 1da:	1b 06       	cpc	r1, r27
 1dc:	5c f4       	brge	.+22     	; 0x1f4 <__vector_17+0x52>
		tick_countdown--;
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	a1 09       	sbc	r26, r1
 1e2:	b1 09       	sbc	r27, r1
 1e4:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <tick_countdown>
 1e8:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <tick_countdown+0x1>
 1ec:	a0 93 cc 02 	sts	0x02CC, r26	; 0x8002cc <tick_countdown+0x2>
 1f0:	b0 93 cd 02 	sts	0x02CD, r27	; 0x8002cd <tick_countdown+0x3>
		
}
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <RTSInit>:
	waitForTask(task);
}

void RTSInit()
{
	TCCR1A = 0b00000000; //Put the timer in clear timer on compare match mode.
 206:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00001010; //Prescale counting clock to 1/8.
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TIMSK1 |= (1<<OCIE1A);
 210:	ef e6       	ldi	r30, 0x6F	; 111
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
	OCR1A = 2000;
 21a:	80 ed       	ldi	r24, 0xD0	; 208
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 222:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 226:	08 95       	ret

00000228 <RTSAddTask>:

}

int8_t RTSAddTask(task_t* task_pointer)
{
	if (MAX_QUEUE_LENGTH == crt_queue_size)
 228:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
 22c:	24 36       	cpi	r18, 0x64	; 100
 22e:	a1 f0       	breq	.+40     	; 0x258 <RTSAddTask+0x30>
		return Error;
	
	task_queue[crt_queue_size] = task_pointer;
 230:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_edata>
 234:	ee 0f       	add	r30, r30
 236:	ff 0b       	sbc	r31, r31
 238:	ef 5f       	subi	r30, 0xFF	; 255
 23a:	fd 4f       	sbci	r31, 0xFD	; 253
 23c:	91 83       	std	Z+1, r25	; 0x01
 23e:	80 83       	st	Z, r24
	task_pointer->task_id = crt_queue_size;
 240:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
	task_pointer->task_state = Idle;
 248:	17 82       	std	Z+7, r1	; 0x07
	crt_queue_size++;
 24a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	
	return Success;
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret
}

int8_t RTSAddTask(task_t* task_pointer)
{
	if (MAX_QUEUE_LENGTH == crt_queue_size)
		return Error;
 258:	8f ef       	ldi	r24, 0xFF	; 255
	task_pointer->task_id = crt_queue_size;
	task_pointer->task_state = Idle;
	crt_queue_size++;
	
	return Success;
}
 25a:	08 95       	ret

0000025c <RTSRun>:

void RTSRun()
{
 25c:	7f 92       	push	r7
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	//Do next job.
	int8_t current_task = 0;

    /*run forever, current_task will be reset before exceeding task_queue_size*/
	for(current_task = 0; current_task<=crt_queue_size; current_task++)
 276:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 27a:	88 23       	and	r24, r24
 27c:	0c f4       	brge	.+2      	; 0x280 <RTSRun+0x24>
 27e:	67 c0       	rjmp	.+206    	; 0x34e <RTSRun+0xf2>
 280:	e1 2c       	mov	r14, r1

static void RTSRunTask(volatile task_t* task)
{
	//Run for number of ticks corresponding to task.
	tick_countdown = task->ticks;
	task->task_state = Running;
 282:	dd 24       	eor	r13, r13
 284:	d3 94       	inc	r13
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
	{
		if(RTSTaskState == Timeout)
 286:	0f 2e       	mov	r0, r31
 288:	fe ef       	ldi	r31, 0xFE	; 254
 28a:	cf 2e       	mov	r12, r31
 28c:	f0 2d       	mov	r31, r0
 28e:	ff 24       	eor	r15, r15
 290:	fa 94       	dec	r15
 292:	0f 2e       	mov	r0, r31
 294:	ff e7       	ldi	r31, 0x7F	; 127
 296:	7f 2e       	mov	r7, r31
 298:	f0 2d       	mov	r31, r0
		{
			task->task_state = Finished;
 29a:	68 94       	set
 29c:	bb 24       	eor	r11, r11
 29e:	b1 f8       	bld	r11, 1

    /*run forever, current_task will be reset before exceeding task_queue_size*/
	for(current_task = 0; current_task<=crt_queue_size; current_task++)
	{
		/*if end of the queue go back to the beginning*/
		if(crt_queue_size == current_task)
 2a0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 2a4:	8e 11       	cpse	r24, r14
 2a6:	35 c0       	rjmp	.+106    	; 0x312 <RTSRun+0xb6>
		current_task = 0;
 2a8:	e1 2c       	mov	r14, r1
 2aa:	33 c0       	rjmp	.+102    	; 0x312 <RTSRun+0xb6>
{
	//UARTTransmitByte('H');
	if(RTSTaskState == Timeout)
	{
		//Task has taken too long!
		UARTTransmitByte('E');
 2ac:	85 e4       	ldi	r24, 0x45	; 69
 2ae:	6d d0       	rcall	.+218    	; 0x38a <UARTTransmitByte>
 2b0:	1d c0       	rjmp	.+58     	; 0x2ec <RTSRun+0x90>
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
	{
		if(RTSTaskState == Timeout)
 2b2:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <RTSTaskState>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	11 f4       	brne	.+4      	; 0x2be <RTSRun+0x62>
		{
			task->task_state = Finished;
 2ba:	bf 82       	std	Y+7, r11	; 0x07
 2bc:	17 c0       	rjmp	.+46     	; 0x2ec <RTSRun+0x90>
 2be:	28 2d       	mov	r18, r8
 2c0:	39 2d       	mov	r19, r9
 2c2:	4a 2d       	mov	r20, r10
 2c4:	50 2f       	mov	r21, r16
 2c6:	61 2f       	mov	r22, r17
 2c8:	7b 2f       	mov	r23, r27
 2ca:	8f 2f       	mov	r24, r31
 2cc:	9e 2f       	mov	r25, r30
 2ce:	af 2d       	mov	r26, r15
 2d0:	66 d0       	rcall	.+204    	; 0x39e <__adddi3_s8>
 2d2:	82 2e       	mov	r8, r18
 2d4:	93 2e       	mov	r9, r19
 2d6:	a4 2e       	mov	r10, r20
 2d8:	05 2f       	mov	r16, r21
 2da:	16 2f       	mov	r17, r22
 2dc:	b7 2f       	mov	r27, r23
 2de:	f8 2f       	mov	r31, r24
 2e0:	e9 2f       	mov	r30, r25
		return Error;	
	}
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
 2e2:	a0 e0       	ldi	r26, 0x00	; 0
 2e4:	68 d0       	rcall	.+208    	; 0x3b6 <__cmpdi2_s8>
 2e6:	29 f7       	brne	.-54     	; 0x2b2 <RTSRun+0x56>
			return Success;
		}
	}
	
	//We should never get to this point, unless the scheduler has failed.
	UARTTransmitByte('F');
 2e8:	86 e4       	ldi	r24, 0x46	; 70
 2ea:	4f d0       	rcall	.+158    	; 0x38a <UARTTransmitByte>
 2ec:	e3 94       	inc	r14
{
	//Do next job.
	int8_t current_task = 0;

    /*run forever, current_task will be reset before exceeding task_queue_size*/
	for(current_task = 0; current_task<=crt_queue_size; current_task++)
 2ee:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 2f2:	8e 15       	cp	r24, r14
 2f4:	ac f6       	brge	.-86     	; 0x2a0 <RTSRun+0x44>
 2f6:	2b c0       	rjmp	.+86     	; 0x34e <RTSRun+0xf2>
 2f8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <RTSTaskState>
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
	{
		if(RTSTaskState == Timeout)
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	e9 f2       	breq	.-70     	; 0x2ba <RTSRun+0x5e>
 300:	8c 2c       	mov	r8, r12
 302:	9f 2c       	mov	r9, r15
 304:	af 2c       	mov	r10, r15
 306:	0f 2d       	mov	r16, r15
 308:	1f 2d       	mov	r17, r15
 30a:	bf 2d       	mov	r27, r15
 30c:	ff 2d       	mov	r31, r15
 30e:	e7 2d       	mov	r30, r7
 310:	d0 cf       	rjmp	.-96     	; 0x2b2 <RTSRun+0x56>
 312:	ee 2d       	mov	r30, r14
	{
		/*if end of the queue go back to the beginning*/
		if(crt_queue_size == current_task)
		current_task = 0;

		RTSRunTask(task_queue[current_task]);
 314:	ee 0f       	add	r30, r30
 316:	ff 0b       	sbc	r31, r31
 318:	ef 5f       	subi	r30, 0xFF	; 255
 31a:	fd 4f       	sbci	r31, 0xFD	; 253
 31c:	c0 81       	ld	r28, Z
 31e:	d1 81       	ldd	r29, Z+1	; 0x01
 320:	89 81       	ldd	r24, Y+1	; 0x01
}

static void RTSRunTask(volatile task_t* task)
{
	//Run for number of ticks corresponding to task.
	tick_countdown = task->ticks;
 322:	9a 81       	ldd	r25, Y+2	; 0x02
 324:	ab 81       	ldd	r26, Y+3	; 0x03
 326:	bc 81       	ldd	r27, Y+4	; 0x04
 328:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <tick_countdown>
 32c:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <tick_countdown+0x1>
 330:	a0 93 cc 02 	sts	0x02CC, r26	; 0x8002cc <tick_countdown+0x2>
 334:	b0 93 cd 02 	sts	0x02CD, r27	; 0x8002cd <tick_countdown+0x3>
 338:	df 82       	std	Y+7, r13	; 0x07
	task->task_state = Running;
 33a:	d0 92 c9 02 	sts	0x02C9, r13	; 0x8002c9 <RTSTaskState>
	RTSTaskState = Running;
 33e:	ed 81       	ldd	r30, Y+5	; 0x05
	
	task->task_cbf();
 340:	fe 81       	ldd	r31, Y+6	; 0x06
 342:	19 95       	eicall
 344:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <RTSTaskState>

//internal helper function.
static int8_t waitForTask(volatile task_t* task)
{
	//UARTTransmitByte('H');
	if(RTSTaskState == Timeout)
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	b1 f6       	brne	.-84     	; 0x2f8 <RTSRun+0x9c>
 34c:	af cf       	rjmp	.-162    	; 0x2ac <RTSRun+0x50>
 34e:	df 91       	pop	r29
		if(crt_queue_size == current_task)
		current_task = 0;

		RTSRunTask(task_queue[current_task]);
	}
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	bf 90       	pop	r11
 360:	af 90       	pop	r10
 362:	9f 90       	pop	r9
 364:	8f 90       	pop	r8
 366:	7f 90       	pop	r7
 368:	08 95       	ret

0000036a <UARTSetup>:
 #define Error  -1
 #define XTAL 16000000

 void UARTSetup()
 {
	UCSR0A = 0b00100000;
 36a:	80 e2       	ldi	r24, 0x20	; 32
 36c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = 0b00011000;
 370:	88 e1       	ldi	r24, 0x18	; 24
 372:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = 0b00000110;
 376:	86 e0       	ldi	r24, 0x06	; 6
 378:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

	UBRR0 = 103;
 37c:	87 e6       	ldi	r24, 0x67	; 103
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 384:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 388:	08 95       	ret

0000038a <UARTTransmitByte>:
 }

 int8_t UARTTransmitByte(uint8_t byte)
 {
	if((UCSR0A & (1<<UDRE0)) != 0)
 38a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 38e:	95 ff       	sbrs	r25, 5
 390:	04 c0       	rjmp	.+8      	; 0x39a <UARTTransmitByte+0x10>
	{
		UDR0 = byte;
 392:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

		return Success;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret
	}

	return Error;
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	08 95       	ret

0000039e <__adddi3_s8>:
 39e:	00 24       	eor	r0, r0
 3a0:	a7 fd       	sbrc	r26, 7
 3a2:	00 94       	com	r0
 3a4:	2a 0f       	add	r18, r26
 3a6:	30 1d       	adc	r19, r0
 3a8:	40 1d       	adc	r20, r0
 3aa:	50 1d       	adc	r21, r0
 3ac:	60 1d       	adc	r22, r0
 3ae:	70 1d       	adc	r23, r0
 3b0:	80 1d       	adc	r24, r0
 3b2:	90 1d       	adc	r25, r0
 3b4:	08 95       	ret

000003b6 <__cmpdi2_s8>:
 3b6:	00 24       	eor	r0, r0
 3b8:	a7 fd       	sbrc	r26, 7
 3ba:	00 94       	com	r0
 3bc:	2a 17       	cp	r18, r26
 3be:	30 05       	cpc	r19, r0
 3c0:	40 05       	cpc	r20, r0
 3c2:	50 05       	cpc	r21, r0
 3c4:	60 05       	cpc	r22, r0
 3c6:	70 05       	cpc	r23, r0
 3c8:	80 05       	cpc	r24, r0
 3ca:	90 05       	cpc	r25, r0
 3cc:	08 95       	ret

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
