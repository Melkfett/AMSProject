
AMSproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800200  00800200  0000065a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001639  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000110d  00000000  00000000  00001e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b2  00000000  00000000  00002f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000038cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ca  00000000  00000000  00003af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067d  00000000  00000000  000042be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000493b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	e2 c0       	rjmp	.+452    	; 0x20a <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a5 30       	cpi	r26, 0x05	; 5
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	4c d0       	rcall	.+152    	; 0x19e <main>
 106:	6d c2       	rjmp	.+1242   	; 0x5e2 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <i2cInit>:
//Clock hastighed???? Skal nok indstilles.
//Init function?

void i2cInit() {
    //PRR0 &= ~(1<<PRTWI);
    TWSR = 0b00000000;
 10a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    TWBR = 152; //38
 10e:	88 e9       	ldi	r24, 0x98	; 152
 110:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 114:	08 95       	ret

00000116 <i2cStart>:
}

void i2cStart() //TWSTA SKAL IFØLGE DATASHEET CLEARES AF OS???? DET GØR VI INGEN STEDER.
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); //Send start condition.
 116:	84 ea       	ldi	r24, 0xA4	; 164
 118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	while (!(TWCR & (1<<TWINT))); //Wait for TWINT to be set; indicating instruction completed.
 11c:	ec eb       	ldi	r30, 0xBC	; 188
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 23       	and	r24, r24
 124:	ec f7       	brge	.-6      	; 0x120 <i2cStart+0xa>
	{}
		
}
 126:	08 95       	ret

00000128 <i2cWrite>:

void i2cWrite(uint8_t data)
{
	//while((TWSR & 0x08) != 0x08);
	//UARTTransmitByte('A');
	TWDR = data;
 128:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	//UARTTransmitByte('A');
	while ((TWCR & (1<<TWINT)) == 0) //Wait for TWINT to be set; indicating instruction completed.
 132:	ec eb       	ldi	r30, 0xBC	; 188
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	ec f7       	brge	.-6      	; 0x136 <i2cWrite+0xe>
	{}
		//UARTTransmitByte('B');
}
 13c:	08 95       	ret

0000013e <i2cReceive>:

void i2cReceive(uint8_t* buf, uint8_t cnt)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	dc 01       	movw	r26, r24
	uint8_t* temp = buf;
	uint8_t cnt_temp = cnt;
	while(cnt_temp > 1)
 144:	62 30       	cpi	r22, 0x02	; 2
 146:	b8 f0       	brcs	.+46     	; 0x176 <i2cReceive+0x38>
 148:	62 50       	subi	r22, 0x02	; 2
 14a:	c6 2f       	mov	r28, r22
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	be 01       	movw	r22, r28
 152:	68 0f       	add	r22, r24
 154:	79 1f       	adc	r23, r25
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); //Start read and generate ack.
 156:	ec eb       	ldi	r30, 0xBC	; 188
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	44 ec       	ldi	r20, 0xC4	; 196
		while((TWCR & (1<<TWINT)) == 0); //Wait for TWINT to be set; indicating instruction completed.
		{
		}
		*temp = TWDR;
 15c:	2b eb       	ldi	r18, 0xBB	; 187
 15e:	30 e0       	ldi	r19, 0x00	; 0
{
	uint8_t* temp = buf;
	uint8_t cnt_temp = cnt;
	while(cnt_temp > 1)
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); //Start read and generate ack.
 160:	40 83       	st	Z, r20
		while((TWCR & (1<<TWINT)) == 0); //Wait for TWINT to be set; indicating instruction completed.
 162:	90 81       	ld	r25, Z
 164:	99 23       	and	r25, r25
 166:	ec f7       	brge	.-6      	; 0x162 <i2cReceive+0x24>
		{
		}
		*temp = TWDR;
 168:	e9 01       	movw	r28, r18
 16a:	88 81       	ld	r24, Y
 16c:	8d 93       	st	X+, r24

void i2cReceive(uint8_t* buf, uint8_t cnt)
{
	uint8_t* temp = buf;
	uint8_t cnt_temp = cnt;
	while(cnt_temp > 1)
 16e:	a6 17       	cp	r26, r22
 170:	b7 07       	cpc	r27, r23
 172:	b1 f7       	brne	.-20     	; 0x160 <i2cReceive+0x22>
 174:	01 c0       	rjmp	.+2      	; 0x178 <i2cReceive+0x3a>
		//UARTTransmitByte('B');
}

void i2cReceive(uint8_t* buf, uint8_t cnt)
{
	uint8_t* temp = buf;
 176:	bc 01       	movw	r22, r24
		*temp = TWDR;
		temp++;
		cnt_temp--;
	}
	
	TWCR = (1<<TWINT) | (1<<TWEN); //Start read, do not generate ack.
 178:	84 e8       	ldi	r24, 0x84	; 132
 17a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while((TWCR & (1<<TWINT)) == 0); //Wait for TWINT to be set; indicating instruction completed.
 17e:	ec eb       	ldi	r30, 0xBC	; 188
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	88 23       	and	r24, r24
 186:	ec f7       	brge	.-6      	; 0x182 <i2cReceive+0x44>
	{
	}
	*temp = TWDR;
 188:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 18c:	fb 01       	movw	r30, r22
 18e:	80 83       	st	Z, r24
	
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <i2cStop>:

void i2cStop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 196:	84 e9       	ldi	r24, 0x94	; 148
 198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 19c:	08 95       	ret

0000019e <main>:
	//UARTTransmitByte(temp);
	UARTTransmitByte('A');
}

int main(void)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	1f 92       	push	r1
 1a4:	1f 92       	push	r1
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	UARTSetup();
 1aa:	b1 d0       	rcall	.+354    	; 0x30e <UARTSetup>
	i2cInit();
 1ac:	ae df       	rcall	.-164    	; 0x10a <i2cInit>
	RTSInit();
 1ae:	5f d0       	rcall	.+190    	; 0x26e <RTSInit>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x18>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x22>
 1c0:	00 00       	nop
	uint16_t test = 0;
	while(1)
	{
	_delay_ms(1000);	
	
	char buffer[2] = {0};
 1c2:	1a 82       	std	Y+2, r1	; 0x02
	
	test = readTemp();
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	7b d0       	rcall	.+246    	; 0x2be <readTemp>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1c8:	bc d0       	rcall	.+376    	; 0x342 <__fixunssfsi>
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22
 1ce:	4a e0       	ldi	r20, 0x0A	; 10
 1d0:	be 01       	movw	r22, r28
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	d2 d1       	rcall	.+932    	; 0x57c <__itoa_ncheck>
	
	itoa((int)test, buffer, 10);
	
	for(i = 0; i<2; i++)
	{
		UARTTransmitByte(buffer[i]);
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	a9 d0       	rcall	.+338    	; 0x32e <UARTTransmitByte>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	84 e3       	ldi	r24, 0x34	; 52
 1e0:	9c e0       	ldi	r25, 0x0C	; 12
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x44>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x4e>
 1ec:	00 00       	nop
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	9e d0       	rcall	.+316    	; 0x32e <UARTTransmitByte>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	84 e3       	ldi	r24, 0x34	; 52
 1f6:	9c e0       	ldi	r25, 0x0C	; 12
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x5a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x64>
 202:	00 00       	nop
		_delay_ms(250);
	}
	
	UARTTransmitByte('\n');
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	93 d0       	rcall	.+294    	; 0x32e <UARTTransmitByte>
 208:	d3 cf       	rjmp	.-90     	; 0x1b0 <main+0x12>

0000020a <__vector_17>:

static volatile task_t* task_queue[MAX_QUEUE_LENGTH];
static volatile int8_t crt_queue_size = 0;

ISR(TIMER1_COMPA_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
	
	/*check if the next task should be scheduled*/
	if (tick_countdown == 0)
 21c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <tick_countdown>
 220:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <tick_countdown+0x1>
 224:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <tick_countdown+0x2>
 228:	b0 91 04 02 	lds	r27, 0x0204	; 0x800204 <tick_countdown+0x3>
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	a1 05       	cpc	r26, r1
 230:	b1 05       	cpc	r27, r1
 232:	21 f4       	brne	.+8      	; 0x23c <__vector_17+0x32>
	{
		RTSTaskState = Timeout;
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 23a:	10 c0       	rjmp	.+32     	; 0x25c <__vector_17+0x52>
		//UARTTransmitByte('I');
	}

	/*decrement the tick counter if still positive*/
	if(tick_countdown > 0)
 23c:	18 16       	cp	r1, r24
 23e:	19 06       	cpc	r1, r25
 240:	1a 06       	cpc	r1, r26
 242:	1b 06       	cpc	r1, r27
 244:	5c f4       	brge	.+22     	; 0x25c <__vector_17+0x52>
		tick_countdown--;
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	a1 09       	sbc	r26, r1
 24a:	b1 09       	sbc	r27, r1
 24c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <tick_countdown>
 250:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <tick_countdown+0x1>
 254:	a0 93 03 02 	sts	0x0203, r26	; 0x800203 <tick_countdown+0x2>
 258:	b0 93 04 02 	sts	0x0204, r27	; 0x800204 <tick_countdown+0x3>
		
}
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <RTSInit>:
	waitForTask(task);
}

void RTSInit()
{
	TCCR1A = 0b00000000; //Put the timer in clear timer on compare match mode.
 26e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00001010; //Prescale counting clock to 1/8.
 272:	8a e0       	ldi	r24, 0x0A	; 10
 274:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TIMSK1 |= (1<<OCIE1A);
 278:	ef e6       	ldi	r30, 0x6F	; 111
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	80 83       	st	Z, r24
	OCR1A = 2000;
 282:	80 ed       	ldi	r24, 0xD0	; 208
 284:	97 e0       	ldi	r25, 0x07	; 7
 286:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 28a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 28e:	08 95       	ret

00000290 <writePointerRegister>:
#define READ 1
#define WRITE 0

static uint8_t address = 0b10010000;

void writePointerRegister(uint8_t pointerReg) {
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
	i2cStart();
 294:	40 df       	rcall	.-384    	; 0x116 <i2cStart>
	i2cWrite(address+WRITE);
 296:	80 e9       	ldi	r24, 0x90	; 144
 298:	47 df       	rcall	.-370    	; 0x128 <i2cWrite>
	i2cWrite(pointerReg);
 29a:	8c 2f       	mov	r24, r28
 29c:	45 df       	rcall	.-374    	; 0x128 <i2cWrite>
	i2cStop();
 29e:	7b df       	rcall	.-266    	; 0x196 <i2cStop>
 2a0:	cf 91       	pop	r28
	
}
 2a2:	08 95       	ret

000002a4 <readPointerRegister>:
 2a4:	cf 93       	push	r28

void readPointerRegister(uint8_t* registerByte) {
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
	
	uint8_t* temp = registerByte;
	
	i2cStart();
 2aa:	35 df       	rcall	.-406    	; 0x116 <i2cStart>
	i2cWrite(address+READ);
 2ac:	81 e9       	ldi	r24, 0x91	; 145
 2ae:	3c df       	rcall	.-392    	; 0x128 <i2cWrite>
	i2cReceive(temp, 2);
 2b0:	62 e0       	ldi	r22, 0x02	; 2
 2b2:	ce 01       	movw	r24, r28
	i2cStop();
 2b4:	44 df       	rcall	.-376    	; 0x13e <i2cReceive>
 2b6:	6f df       	rcall	.-290    	; 0x196 <i2cStop>
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <readTemp>:

float readTemp(){
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	1f 92       	push	r1
 2c4:	1f 92       	push	r1
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t readByte[2];
	int16_t digitalTemp;

	writePointerRegister(TEMP_REGISTER); //Write to the Pointer Register with the Temperature address
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	e1 df       	rcall	.-62     	; 0x290 <writePointerRegister>
	readPointerRegister(readByte); //Receive temperature in two bytes
 2ce:	ce 01       	movw	r24, r28
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	e8 df       	rcall	.-48     	; 0x2a4 <readPointerRegister>
	// //Check for 13 bit mode
	// if(readByte[1] & 0x01) {

	// }

	digitalTemp = ((uint16_t)(readByte[0] << 8) | (readByte[1])); //Bitshifting because the received bytes are not formatted as digital temperature
 2d4:	69 81       	ldd	r22, Y+1	; 0x01
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	76 2f       	mov	r23, r22
 2da:	66 27       	eor	r22, r22
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	68 2b       	or	r22, r24
	digitalTemp = (digitalTemp>>4);
 2e0:	75 95       	asr	r23
 2e2:	67 95       	ror	r22
 2e4:	75 95       	asr	r23
 2e6:	67 95       	ror	r22
 2e8:	75 95       	asr	r23
 2ea:	67 95       	ror	r22
 2ec:	75 95       	asr	r23
 2ee:	67 95       	ror	r22
		digitalTemp |= 0xF000;
		digitalTemp = digitalTemp+1;
	}


	return digitalTemp*0.0625;
 2f0:	07 2e       	mov	r0, r23
 2f2:	00 0c       	add	r0, r0
 2f4:	88 0b       	sbc	r24, r24
 2f6:	99 0b       	sbc	r25, r25
 2f8:	52 d0       	rcall	.+164    	; 0x39e <__floatsisf>
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e8       	ldi	r20, 0x80	; 128
 300:	5d e3       	ldi	r21, 0x3D	; 61
 302:	b1 d0       	rcall	.+354    	; 0x466 <__mulsf3>


 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <UARTSetup>:
 #define Error  -1
 #define XTAL 16000000

 void UARTSetup()
 {
	UCSR0A = 0b00100000;
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = 0b00011000;
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = 0b00000110;
 31a:	86 e0       	ldi	r24, 0x06	; 6
 31c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

	UBRR0 = 103;
 320:	87 e6       	ldi	r24, 0x67	; 103
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 328:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 32c:	08 95       	ret

0000032e <UARTTransmitByte>:
 }

 int8_t UARTTransmitByte(uint8_t byte)
 {
	if((UCSR0A & (1<<UDRE0)) != 0)
 32e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 332:	95 ff       	sbrs	r25, 5
 334:	04 c0       	rjmp	.+8      	; 0x33e <UARTTransmitByte+0x10>
	{
		UDR0 = byte;
 336:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

		return Success;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret
	}

	return Error;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	08 95       	ret

00000342 <__fixunssfsi>:
 342:	70 d0       	rcall	.+224    	; 0x424 <__fp_splitA>
 344:	88 f0       	brcs	.+34     	; 0x368 <__fixunssfsi+0x26>
 346:	9f 57       	subi	r25, 0x7F	; 127
 348:	90 f0       	brcs	.+36     	; 0x36e <__fixunssfsi+0x2c>
 34a:	b9 2f       	mov	r27, r25
 34c:	99 27       	eor	r25, r25
 34e:	b7 51       	subi	r27, 0x17	; 23
 350:	a0 f0       	brcs	.+40     	; 0x37a <__fixunssfsi+0x38>
 352:	d1 f0       	breq	.+52     	; 0x388 <__fixunssfsi+0x46>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	88 1f       	adc	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	1a f0       	brmi	.+6      	; 0x364 <__fixunssfsi+0x22>
 35e:	ba 95       	dec	r27
 360:	c9 f7       	brne	.-14     	; 0x354 <__fixunssfsi+0x12>
 362:	12 c0       	rjmp	.+36     	; 0x388 <__fixunssfsi+0x46>
 364:	b1 30       	cpi	r27, 0x01	; 1
 366:	81 f0       	breq	.+32     	; 0x388 <__fixunssfsi+0x46>
 368:	77 d0       	rcall	.+238    	; 0x458 <__fp_zero>
 36a:	b1 e0       	ldi	r27, 0x01	; 1
 36c:	08 95       	ret
 36e:	74 c0       	rjmp	.+232    	; 0x458 <__fp_zero>
 370:	67 2f       	mov	r22, r23
 372:	78 2f       	mov	r23, r24
 374:	88 27       	eor	r24, r24
 376:	b8 5f       	subi	r27, 0xF8	; 248
 378:	39 f0       	breq	.+14     	; 0x388 <__fixunssfsi+0x46>
 37a:	b9 3f       	cpi	r27, 0xF9	; 249
 37c:	cc f3       	brlt	.-14     	; 0x370 <__fixunssfsi+0x2e>
 37e:	86 95       	lsr	r24
 380:	77 95       	ror	r23
 382:	67 95       	ror	r22
 384:	b3 95       	inc	r27
 386:	d9 f7       	brne	.-10     	; 0x37e <__fixunssfsi+0x3c>
 388:	3e f4       	brtc	.+14     	; 0x398 <__fixunssfsi+0x56>
 38a:	90 95       	com	r25
 38c:	80 95       	com	r24
 38e:	70 95       	com	r23
 390:	61 95       	neg	r22
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 4f       	sbci	r24, 0xFF	; 255
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 398:	08 95       	ret

0000039a <__floatunsisf>:
 39a:	e8 94       	clt
 39c:	09 c0       	rjmp	.+18     	; 0x3b0 <__floatsisf+0x12>

0000039e <__floatsisf>:
 39e:	97 fb       	bst	r25, 7
 3a0:	3e f4       	brtc	.+14     	; 0x3b0 <__floatsisf+0x12>
 3a2:	90 95       	com	r25
 3a4:	80 95       	com	r24
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	99 23       	and	r25, r25
 3b2:	a9 f0       	breq	.+42     	; 0x3de <__floatsisf+0x40>
 3b4:	f9 2f       	mov	r31, r25
 3b6:	96 e9       	ldi	r25, 0x96	; 150
 3b8:	bb 27       	eor	r27, r27
 3ba:	93 95       	inc	r25
 3bc:	f6 95       	lsr	r31
 3be:	87 95       	ror	r24
 3c0:	77 95       	ror	r23
 3c2:	67 95       	ror	r22
 3c4:	b7 95       	ror	r27
 3c6:	f1 11       	cpse	r31, r1
 3c8:	f8 cf       	rjmp	.-16     	; 0x3ba <__floatsisf+0x1c>
 3ca:	fa f4       	brpl	.+62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3cc:	bb 0f       	add	r27, r27
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <__floatsisf+0x36>
 3d0:	60 ff       	sbrs	r22, 0
 3d2:	1b c0       	rjmp	.+54     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	16 c0       	rjmp	.+44     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3de:	88 23       	and	r24, r24
 3e0:	11 f0       	breq	.+4      	; 0x3e6 <__floatsisf+0x48>
 3e2:	96 e9       	ldi	r25, 0x96	; 150
 3e4:	11 c0       	rjmp	.+34     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e6:	77 23       	and	r23, r23
 3e8:	21 f0       	breq	.+8      	; 0x3f2 <__floatsisf+0x54>
 3ea:	9e e8       	ldi	r25, 0x8E	; 142
 3ec:	87 2f       	mov	r24, r23
 3ee:	76 2f       	mov	r23, r22
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <__floatsisf+0x5e>
 3f2:	66 23       	and	r22, r22
 3f4:	71 f0       	breq	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f6:	96 e8       	ldi	r25, 0x86	; 134
 3f8:	86 2f       	mov	r24, r22
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	2a f0       	brmi	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 400:	9a 95       	dec	r25
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	da f7       	brpl	.-10     	; 0x400 <__LOCK_REGION_LENGTH__>
 40a:	88 0f       	add	r24, r24
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret

00000414 <__fp_split3>:
 414:	57 fd       	sbrc	r21, 7
 416:	90 58       	subi	r25, 0x80	; 128
 418:	44 0f       	add	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	59 f0       	breq	.+22     	; 0x434 <__fp_splitA+0x10>
 41e:	5f 3f       	cpi	r21, 0xFF	; 255
 420:	71 f0       	breq	.+28     	; 0x43e <__fp_splitA+0x1a>
 422:	47 95       	ror	r20

00000424 <__fp_splitA>:
 424:	88 0f       	add	r24, r24
 426:	97 fb       	bst	r25, 7
 428:	99 1f       	adc	r25, r25
 42a:	61 f0       	breq	.+24     	; 0x444 <__fp_splitA+0x20>
 42c:	9f 3f       	cpi	r25, 0xFF	; 255
 42e:	79 f0       	breq	.+30     	; 0x44e <__fp_splitA+0x2a>
 430:	87 95       	ror	r24
 432:	08 95       	ret
 434:	12 16       	cp	r1, r18
 436:	13 06       	cpc	r1, r19
 438:	14 06       	cpc	r1, r20
 43a:	55 1f       	adc	r21, r21
 43c:	f2 cf       	rjmp	.-28     	; 0x422 <__fp_split3+0xe>
 43e:	46 95       	lsr	r20
 440:	f1 df       	rcall	.-30     	; 0x424 <__fp_splitA>
 442:	08 c0       	rjmp	.+16     	; 0x454 <__fp_splitA+0x30>
 444:	16 16       	cp	r1, r22
 446:	17 06       	cpc	r1, r23
 448:	18 06       	cpc	r1, r24
 44a:	99 1f       	adc	r25, r25
 44c:	f1 cf       	rjmp	.-30     	; 0x430 <__fp_splitA+0xc>
 44e:	86 95       	lsr	r24
 450:	71 05       	cpc	r23, r1
 452:	61 05       	cpc	r22, r1
 454:	08 94       	sec
 456:	08 95       	ret

00000458 <__fp_zero>:
 458:	e8 94       	clt

0000045a <__fp_szero>:
 45a:	bb 27       	eor	r27, r27
 45c:	66 27       	eor	r22, r22
 45e:	77 27       	eor	r23, r23
 460:	cb 01       	movw	r24, r22
 462:	97 f9       	bld	r25, 7
 464:	08 95       	ret

00000466 <__mulsf3>:
 466:	0b d0       	rcall	.+22     	; 0x47e <__mulsf3x>
 468:	78 c0       	rjmp	.+240    	; 0x55a <__fp_round>
 46a:	69 d0       	rcall	.+210    	; 0x53e <__fp_pscA>
 46c:	28 f0       	brcs	.+10     	; 0x478 <__mulsf3+0x12>
 46e:	6e d0       	rcall	.+220    	; 0x54c <__fp_pscB>
 470:	18 f0       	brcs	.+6      	; 0x478 <__mulsf3+0x12>
 472:	95 23       	and	r25, r21
 474:	09 f0       	breq	.+2      	; 0x478 <__mulsf3+0x12>
 476:	5a c0       	rjmp	.+180    	; 0x52c <__fp_inf>
 478:	5f c0       	rjmp	.+190    	; 0x538 <__fp_nan>
 47a:	11 24       	eor	r1, r1
 47c:	ee cf       	rjmp	.-36     	; 0x45a <__fp_szero>

0000047e <__mulsf3x>:
 47e:	ca df       	rcall	.-108    	; 0x414 <__fp_split3>
 480:	a0 f3       	brcs	.-24     	; 0x46a <__mulsf3+0x4>

00000482 <__mulsf3_pse>:
 482:	95 9f       	mul	r25, r21
 484:	d1 f3       	breq	.-12     	; 0x47a <__mulsf3+0x14>
 486:	95 0f       	add	r25, r21
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	55 1f       	adc	r21, r21
 48c:	62 9f       	mul	r22, r18
 48e:	f0 01       	movw	r30, r0
 490:	72 9f       	mul	r23, r18
 492:	bb 27       	eor	r27, r27
 494:	f0 0d       	add	r31, r0
 496:	b1 1d       	adc	r27, r1
 498:	63 9f       	mul	r22, r19
 49a:	aa 27       	eor	r26, r26
 49c:	f0 0d       	add	r31, r0
 49e:	b1 1d       	adc	r27, r1
 4a0:	aa 1f       	adc	r26, r26
 4a2:	64 9f       	mul	r22, r20
 4a4:	66 27       	eor	r22, r22
 4a6:	b0 0d       	add	r27, r0
 4a8:	a1 1d       	adc	r26, r1
 4aa:	66 1f       	adc	r22, r22
 4ac:	82 9f       	mul	r24, r18
 4ae:	22 27       	eor	r18, r18
 4b0:	b0 0d       	add	r27, r0
 4b2:	a1 1d       	adc	r26, r1
 4b4:	62 1f       	adc	r22, r18
 4b6:	73 9f       	mul	r23, r19
 4b8:	b0 0d       	add	r27, r0
 4ba:	a1 1d       	adc	r26, r1
 4bc:	62 1f       	adc	r22, r18
 4be:	83 9f       	mul	r24, r19
 4c0:	a0 0d       	add	r26, r0
 4c2:	61 1d       	adc	r22, r1
 4c4:	22 1f       	adc	r18, r18
 4c6:	74 9f       	mul	r23, r20
 4c8:	33 27       	eor	r19, r19
 4ca:	a0 0d       	add	r26, r0
 4cc:	61 1d       	adc	r22, r1
 4ce:	23 1f       	adc	r18, r19
 4d0:	84 9f       	mul	r24, r20
 4d2:	60 0d       	add	r22, r0
 4d4:	21 1d       	adc	r18, r1
 4d6:	82 2f       	mov	r24, r18
 4d8:	76 2f       	mov	r23, r22
 4da:	6a 2f       	mov	r22, r26
 4dc:	11 24       	eor	r1, r1
 4de:	9f 57       	subi	r25, 0x7F	; 127
 4e0:	50 40       	sbci	r21, 0x00	; 0
 4e2:	8a f0       	brmi	.+34     	; 0x506 <__mulsf3_pse+0x84>
 4e4:	e1 f0       	breq	.+56     	; 0x51e <__mulsf3_pse+0x9c>
 4e6:	88 23       	and	r24, r24
 4e8:	4a f0       	brmi	.+18     	; 0x4fc <__mulsf3_pse+0x7a>
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	bb 1f       	adc	r27, r27
 4f0:	66 1f       	adc	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	91 50       	subi	r25, 0x01	; 1
 4f8:	50 40       	sbci	r21, 0x00	; 0
 4fa:	a9 f7       	brne	.-22     	; 0x4e6 <__mulsf3_pse+0x64>
 4fc:	9e 3f       	cpi	r25, 0xFE	; 254
 4fe:	51 05       	cpc	r21, r1
 500:	70 f0       	brcs	.+28     	; 0x51e <__mulsf3_pse+0x9c>
 502:	14 c0       	rjmp	.+40     	; 0x52c <__fp_inf>
 504:	aa cf       	rjmp	.-172    	; 0x45a <__fp_szero>
 506:	5f 3f       	cpi	r21, 0xFF	; 255
 508:	ec f3       	brlt	.-6      	; 0x504 <__mulsf3_pse+0x82>
 50a:	98 3e       	cpi	r25, 0xE8	; 232
 50c:	dc f3       	brlt	.-10     	; 0x504 <__mulsf3_pse+0x82>
 50e:	86 95       	lsr	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b7 95       	ror	r27
 516:	f7 95       	ror	r31
 518:	e7 95       	ror	r30
 51a:	9f 5f       	subi	r25, 0xFF	; 255
 51c:	c1 f7       	brne	.-16     	; 0x50e <__mulsf3_pse+0x8c>
 51e:	fe 2b       	or	r31, r30
 520:	88 0f       	add	r24, r24
 522:	91 1d       	adc	r25, r1
 524:	96 95       	lsr	r25
 526:	87 95       	ror	r24
 528:	97 f9       	bld	r25, 7
 52a:	08 95       	ret

0000052c <__fp_inf>:
 52c:	97 f9       	bld	r25, 7
 52e:	9f 67       	ori	r25, 0x7F	; 127
 530:	80 e8       	ldi	r24, 0x80	; 128
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	08 95       	ret

00000538 <__fp_nan>:
 538:	9f ef       	ldi	r25, 0xFF	; 255
 53a:	80 ec       	ldi	r24, 0xC0	; 192
 53c:	08 95       	ret

0000053e <__fp_pscA>:
 53e:	00 24       	eor	r0, r0
 540:	0a 94       	dec	r0
 542:	16 16       	cp	r1, r22
 544:	17 06       	cpc	r1, r23
 546:	18 06       	cpc	r1, r24
 548:	09 06       	cpc	r0, r25
 54a:	08 95       	ret

0000054c <__fp_pscB>:
 54c:	00 24       	eor	r0, r0
 54e:	0a 94       	dec	r0
 550:	12 16       	cp	r1, r18
 552:	13 06       	cpc	r1, r19
 554:	14 06       	cpc	r1, r20
 556:	05 06       	cpc	r0, r21
 558:	08 95       	ret

0000055a <__fp_round>:
 55a:	09 2e       	mov	r0, r25
 55c:	03 94       	inc	r0
 55e:	00 0c       	add	r0, r0
 560:	11 f4       	brne	.+4      	; 0x566 <__fp_round+0xc>
 562:	88 23       	and	r24, r24
 564:	52 f0       	brmi	.+20     	; 0x57a <__fp_round+0x20>
 566:	bb 0f       	add	r27, r27
 568:	40 f4       	brcc	.+16     	; 0x57a <__fp_round+0x20>
 56a:	bf 2b       	or	r27, r31
 56c:	11 f4       	brne	.+4      	; 0x572 <__fp_round+0x18>
 56e:	60 ff       	sbrs	r22, 0
 570:	04 c0       	rjmp	.+8      	; 0x57a <__fp_round+0x20>
 572:	6f 5f       	subi	r22, 0xFF	; 255
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	8f 4f       	sbci	r24, 0xFF	; 255
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	08 95       	ret

0000057c <__itoa_ncheck>:
 57c:	bb 27       	eor	r27, r27
 57e:	4a 30       	cpi	r20, 0x0A	; 10
 580:	31 f4       	brne	.+12     	; 0x58e <__itoa_ncheck+0x12>
 582:	99 23       	and	r25, r25
 584:	22 f4       	brpl	.+8      	; 0x58e <__itoa_ncheck+0x12>
 586:	bd e2       	ldi	r27, 0x2D	; 45
 588:	90 95       	com	r25
 58a:	81 95       	neg	r24
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	01 c0       	rjmp	.+2      	; 0x592 <__utoa_common>

00000590 <__utoa_ncheck>:
 590:	bb 27       	eor	r27, r27

00000592 <__utoa_common>:
 592:	fb 01       	movw	r30, r22
 594:	55 27       	eor	r21, r21
 596:	aa 27       	eor	r26, r26
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	aa 1f       	adc	r26, r26
 59e:	a4 17       	cp	r26, r20
 5a0:	10 f0       	brcs	.+4      	; 0x5a6 <__utoa_common+0x14>
 5a2:	a4 1b       	sub	r26, r20
 5a4:	83 95       	inc	r24
 5a6:	50 51       	subi	r21, 0x10	; 16
 5a8:	b9 f7       	brne	.-18     	; 0x598 <__utoa_common+0x6>
 5aa:	a0 5d       	subi	r26, 0xD0	; 208
 5ac:	aa 33       	cpi	r26, 0x3A	; 58
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <__utoa_common+0x20>
 5b0:	a9 5d       	subi	r26, 0xD9	; 217
 5b2:	a1 93       	st	Z+, r26
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	79 f7       	brne	.-34     	; 0x596 <__utoa_common+0x4>
 5b8:	b1 11       	cpse	r27, r1
 5ba:	b1 93       	st	Z+, r27
 5bc:	11 92       	st	Z+, r1
 5be:	cb 01       	movw	r24, r22
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <strrev>

000005c2 <strrev>:
 5c2:	dc 01       	movw	r26, r24
 5c4:	fc 01       	movw	r30, r24
 5c6:	67 2f       	mov	r22, r23
 5c8:	71 91       	ld	r23, Z+
 5ca:	77 23       	and	r23, r23
 5cc:	e1 f7       	brne	.-8      	; 0x5c6 <strrev+0x4>
 5ce:	32 97       	sbiw	r30, 0x02	; 2
 5d0:	04 c0       	rjmp	.+8      	; 0x5da <strrev+0x18>
 5d2:	7c 91       	ld	r23, X
 5d4:	6d 93       	st	X+, r22
 5d6:	70 83       	st	Z, r23
 5d8:	62 91       	ld	r22, -Z
 5da:	ae 17       	cp	r26, r30
 5dc:	bf 07       	cpc	r27, r31
 5de:	c8 f3       	brcs	.-14     	; 0x5d2 <strrev+0x10>
 5e0:	08 95       	ret

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
