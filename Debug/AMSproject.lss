
AMSproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  00800200  00800200  00000538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ed  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001104  00000000  00000000  00001cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a85  00000000  00000000  00002dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ce  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e6  00000000  00000000  00004272  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	fd c0       	rjmp	.+506    	; 0x240 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 3d       	cpi	r26, 0xD1	; 209
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	66 d0       	rcall	.+204    	; 0x1d2 <main>
 106:	dc c1       	rjmp	.+952    	; 0x4c0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <runDistanceModule>:
void runDistanceModule()
{
	
	//if(sonarIsReady()) //check for ongoing reading. (The thingie pin)
	{
		switch(alternator)
 10a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <alternator>
 10e:	88 23       	and	r24, r24
 110:	19 f0       	breq	.+6      	; 0x118 <runDistanceModule+0xe>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	19 f0       	breq	.+6      	; 0x11c <runDistanceModule+0x12>
 116:	05 c0       	rjmp	.+10     	; 0x122 <runDistanceModule+0x18>
		{
			case 0 :
				sonarDoRangeCheckNow();
 118:	9a d1       	rcall	.+820    	; 0x44e <sonarDoRangeCheckNow>
				break;
 11a:	03 c0       	rjmp	.+6      	; 0x122 <runDistanceModule+0x18>
			case 1 :
				sonarRead(&lastReading);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	92 e0       	ldi	r25, 0x02	; 2
 120:	73 d1       	rcall	.+742    	; 0x408 <sonarRead>
				break;
			default :
				break;
		}
		if(alternator == 1)
 122:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <alternator>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	19 f4       	brne	.+6      	; 0x130 <runDistanceModule+0x26>
			alternator = 0;
 12a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <alternator>
 12e:	08 95       	ret
		else
			alternator = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <alternator>
 136:	08 95       	ret

00000138 <i2cInit>:
//Clock hastighed???? Skal nok indstilles.
//Init function?

void i2cInit() {
    //PRR0 &= ~(1<<PRTWI);
    TWSR = 0b00000000;
 138:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    TWBR = 152; //38
 13c:	88 e9       	ldi	r24, 0x98	; 152
 13e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
 142:	08 95       	ret

00000144 <i2cStart>:
}

void i2cStart() //TWSTA SKAL IFØLGE DATASHEET CLEARES AF OS???? DET GØR VI INGEN STEDER.
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); //Send start condition.
 144:	84 ea       	ldi	r24, 0xA4	; 164
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	while (!(TWCR & (1<<TWINT))); //Wait for TWINT to be set; indicating instruction completed.
 14a:	ec eb       	ldi	r30, 0xBC	; 188
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	ec f7       	brge	.-6      	; 0x14e <i2cStart+0xa>
	{}
		
}
 154:	08 95       	ret

00000156 <i2cWrite>:

void i2cWrite(uint8_t data)
{
	//while((TWSR & 0x08) != 0x08);
	//UARTTransmitByte('A');
	TWDR = data;
 156:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	//UARTTransmitByte('A');
	while ((TWCR & (1<<TWINT)) == 0) //Wait for TWINT to be set; indicating instruction completed.
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <i2cWrite+0xe>
	{}
		//UARTTransmitByte('B');
}
 16a:	08 95       	ret

0000016c <i2cReceive>:

void i2cReceive(uint8_t* buf, uint8_t cnt)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	dc 01       	movw	r26, r24
	uint8_t* temp = buf;
	uint8_t cnt_temp = cnt;
	while(cnt_temp > 1)
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	b8 f0       	brcs	.+46     	; 0x1a4 <i2cReceive+0x38>
 176:	62 50       	subi	r22, 0x02	; 2
 178:	c6 2f       	mov	r28, r22
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	be 01       	movw	r22, r28
 180:	68 0f       	add	r22, r24
 182:	79 1f       	adc	r23, r25
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); //Start read and generate ack.
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	44 ec       	ldi	r20, 0xC4	; 196
		while((TWCR & (1<<TWINT)) == 0); //Wait for TWINT to be set; indicating instruction completed.
		{
		}
		*temp = TWDR;
 18a:	2b eb       	ldi	r18, 0xBB	; 187
 18c:	30 e0       	ldi	r19, 0x00	; 0
{
	uint8_t* temp = buf;
	uint8_t cnt_temp = cnt;
	while(cnt_temp > 1)
	{
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); //Start read and generate ack.
 18e:	40 83       	st	Z, r20
		while((TWCR & (1<<TWINT)) == 0); //Wait for TWINT to be set; indicating instruction completed.
 190:	90 81       	ld	r25, Z
 192:	99 23       	and	r25, r25
 194:	ec f7       	brge	.-6      	; 0x190 <i2cReceive+0x24>
		{
		}
		*temp = TWDR;
 196:	e9 01       	movw	r28, r18
 198:	88 81       	ld	r24, Y
 19a:	8d 93       	st	X+, r24

void i2cReceive(uint8_t* buf, uint8_t cnt)
{
	uint8_t* temp = buf;
	uint8_t cnt_temp = cnt;
	while(cnt_temp > 1)
 19c:	a6 17       	cp	r26, r22
 19e:	b7 07       	cpc	r27, r23
 1a0:	b1 f7       	brne	.-20     	; 0x18e <i2cReceive+0x22>
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <i2cReceive+0x3a>
		//UARTTransmitByte('B');
}

void i2cReceive(uint8_t* buf, uint8_t cnt)
{
	uint8_t* temp = buf;
 1a4:	bc 01       	movw	r22, r24
		*temp = TWDR;
		temp++;
		cnt_temp--;
	}
	
	TWCR = (1<<TWINT) | (1<<TWEN); //Start read, do not generate ack.
 1a6:	84 e8       	ldi	r24, 0x84	; 132
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while((TWCR & (1<<TWINT)) == 0); //Wait for TWINT to be set; indicating instruction completed.
 1ac:	ec eb       	ldi	r30, 0xBC	; 188
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	ec f7       	brge	.-6      	; 0x1b0 <i2cReceive+0x44>
	{
	}
	*temp = TWDR;
 1b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1ba:	fb 01       	movw	r30, r22
 1bc:	80 83       	st	Z, r24
	
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <i2cStop>:

void i2cStop()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1c4:	84 e9       	ldi	r24, 0x94	; 148
 1c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1ca:	08 95       	ret

000001cc <printReading>:
	UARTTransmitByte('B');
}

void testfunc2()
{
	UARTTransmitByte('A');
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	56 c1       	rjmp	.+684    	; 0x47c <UARTTransmitByte>
 1d0:	08 95       	ret

000001d2 <main>:
	//UARTTransmitByte(temp);
	UARTTransmitByte('A');
}

int main(void)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	60 97       	sbiw	r28, 0x10	; 16
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	UARTSetup();
 1e6:	3a d1       	rcall	.+628    	; 0x45c <UARTSetup>
	i2cInit();
 1e8:	a7 df       	rcall	.-178    	; 0x138 <i2cInit>
	RTSInit();
 1ea:	5c d0       	rcall	.+184    	; 0x2a4 <RTSInit>
 1ec:	85 e8       	ldi	r24, 0x85	; 133

	task_t runSonar;
	runSonar.task_cbf = runDistanceModule;
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	9f 83       	std	Y+7, r25	; 0x07
 1f2:	8e 83       	std	Y+6, r24	; 0x06
 1f4:	0f 2e       	mov	r0, r31
	runSonar.ticks = 500;
 1f6:	f4 ef       	ldi	r31, 0xF4	; 244
 1f8:	cf 2e       	mov	r12, r31
 1fa:	dd 24       	eor	r13, r13
 1fc:	d3 94       	inc	r13
 1fe:	e1 2c       	mov	r14, r1
 200:	f1 2c       	mov	r15, r1
 202:	f0 2d       	mov	r31, r0
 204:	ca 82       	std	Y+2, r12	; 0x02
 206:	db 82       	std	Y+3, r13	; 0x03
 208:	ec 82       	std	Y+4, r14	; 0x04
 20a:	fd 82       	std	Y+5, r15	; 0x05
	RTSAddTask(&runSonar);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	5a d0       	rcall	.+180    	; 0x2c6 <RTSAddTask>
 212:	86 ee       	ldi	r24, 0xE6	; 230
	
	task_t printReadingTask;
	printReadingTask.task_cbf = printReading;
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	9f 87       	std	Y+15, r25	; 0x0f
 218:	8e 87       	std	Y+14, r24	; 0x0e
 21a:	ca 86       	std	Y+10, r12	; 0x0a
	printReadingTask.ticks = 500;
 21c:	db 86       	std	Y+11, r13	; 0x0b
 21e:	ec 86       	std	Y+12, r14	; 0x0c
 220:	fd 86       	std	Y+13, r15	; 0x0d
	RTSAddTask(&printReadingTask);
 222:	ce 01       	movw	r24, r28
 224:	09 96       	adiw	r24, 0x09	; 9
 226:	4f d0       	rcall	.+158    	; 0x2c6 <RTSAddTask>
 228:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	83 ed       	ldi	r24, 0xD3	; 211
 22c:	90 e3       	ldi	r25, 0x30	; 48
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x5c>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x66>
 238:	00 00       	nop
		
	}
	*/
	
	_delay_ms(1000);
	sei();
 23a:	78 94       	sei
	RTSRun();
 23c:	5e d0       	rcall	.+188    	; 0x2fa <RTSRun>
 23e:	ff cf       	rjmp	.-2      	; 0x23e <main+0x6c>

00000240 <__vector_17>:

static volatile task_t* task_queue[MAX_QUEUE_LENGTH];
static volatile int8_t crt_queue_size = 0;

ISR(TIMER1_COMPA_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
	
	/*check if the next task should be scheduled*/
	if (tick_countdown == 0)
 252:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <tick_countdown>
 256:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <tick_countdown+0x1>
 25a:	a0 91 cf 02 	lds	r26, 0x02CF	; 0x8002cf <tick_countdown+0x2>
 25e:	b0 91 d0 02 	lds	r27, 0x02D0	; 0x8002d0 <tick_countdown+0x3>
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	a1 05       	cpc	r26, r1
 266:	b1 05       	cpc	r27, r1
 268:	21 f4       	brne	.+8      	; 0x272 <__vector_17+0x32>
	{
		RTSTaskState = Timeout;
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <RTSTaskState>
 270:	10 c0       	rjmp	.+32     	; 0x292 <__vector_17+0x52>
		//UARTTransmitByte('I');
	}

	/*decrement the tick counter if still positive*/
	if(tick_countdown > 0)
 272:	18 16       	cp	r1, r24
 274:	19 06       	cpc	r1, r25
 276:	1a 06       	cpc	r1, r26
 278:	1b 06       	cpc	r1, r27
 27a:	5c f4       	brge	.+22     	; 0x292 <__vector_17+0x52>
		tick_countdown--;
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	a1 09       	sbc	r26, r1
 280:	b1 09       	sbc	r27, r1
 282:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <tick_countdown>
 286:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <tick_countdown+0x1>
 28a:	a0 93 cf 02 	sts	0x02CF, r26	; 0x8002cf <tick_countdown+0x2>
 28e:	b0 93 d0 02 	sts	0x02D0, r27	; 0x8002d0 <tick_countdown+0x3>
		
}
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <RTSInit>:
	waitForTask(task);
}

void RTSInit()
{
	TCCR1A = 0b00000000; //Put the timer in clear timer on compare match mode.
 2a4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00001010; //Prescale counting clock to 1/8.
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TIMSK1 |= (1<<OCIE1A);
 2ae:	ef e6       	ldi	r30, 0x6F	; 111
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	80 83       	st	Z, r24
	OCR1A = 2000;
 2b8:	80 ed       	ldi	r24, 0xD0	; 208
 2ba:	97 e0       	ldi	r25, 0x07	; 7
 2bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 2c4:	08 95       	ret

000002c6 <RTSAddTask>:

}

int8_t RTSAddTask(task_t* task_pointer)
{
	if (MAX_QUEUE_LENGTH == crt_queue_size)
 2c6:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <crt_queue_size>
 2ca:	24 36       	cpi	r18, 0x64	; 100
 2cc:	a1 f0       	breq	.+40     	; 0x2f6 <RTSAddTask+0x30>
		return Error;
	
	task_queue[crt_queue_size] = task_pointer;
 2ce:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <crt_queue_size>
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 0b       	sbc	r31, r31
 2d6:	ec 5f       	subi	r30, 0xFC	; 252
 2d8:	fd 4f       	sbci	r31, 0xFD	; 253
 2da:	91 83       	std	Z+1, r25	; 0x01
 2dc:	80 83       	st	Z, r24
	task_pointer->task_id = crt_queue_size;
 2de:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <crt_queue_size>
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
	task_pointer->task_state = Idle;
 2e6:	17 82       	std	Z+7, r1	; 0x07
	crt_queue_size++;
 2e8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <crt_queue_size>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <crt_queue_size>
	
	return Success;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
}

int8_t RTSAddTask(task_t* task_pointer)
{
	if (MAX_QUEUE_LENGTH == crt_queue_size)
		return Error;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
	task_pointer->task_id = crt_queue_size;
	task_pointer->task_state = Idle;
	crt_queue_size++;
	
	return Success;
}
 2f8:	08 95       	ret

000002fa <RTSRun>:

void RTSRun()
{
 2fa:	7f 92       	push	r7
 2fc:	8f 92       	push	r8
 2fe:	9f 92       	push	r9
 300:	af 92       	push	r10
 302:	bf 92       	push	r11
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	//Do next job.
	int8_t current_task = 0;

    /*run forever, current_task will be reset before exceeding task_queue_size*/
	for(current_task = 0; current_task<=crt_queue_size; current_task++)
 314:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <crt_queue_size>
 318:	88 23       	and	r24, r24
 31a:	0c f4       	brge	.+2      	; 0x31e <RTSRun+0x24>
 31c:	67 c0       	rjmp	.+206    	; 0x3ec <RTSRun+0xf2>
 31e:	e1 2c       	mov	r14, r1

static void RTSRunTask(volatile task_t* task)
{
	//Run for number of ticks corresponding to task.
	tick_countdown = task->ticks;
	task->task_state = Running;
 320:	dd 24       	eor	r13, r13
 322:	d3 94       	inc	r13
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
	{
		if(RTSTaskState == Timeout)
 324:	0f 2e       	mov	r0, r31
 326:	fe ef       	ldi	r31, 0xFE	; 254
 328:	cf 2e       	mov	r12, r31
 32a:	f0 2d       	mov	r31, r0
 32c:	ff 24       	eor	r15, r15
 32e:	fa 94       	dec	r15
 330:	0f 2e       	mov	r0, r31
 332:	ff e7       	ldi	r31, 0x7F	; 127
 334:	7f 2e       	mov	r7, r31
 336:	f0 2d       	mov	r31, r0
		{
			task->task_state = Finished;
 338:	68 94       	set
 33a:	bb 24       	eor	r11, r11
 33c:	b1 f8       	bld	r11, 1

    /*run forever, current_task will be reset before exceeding task_queue_size*/
	for(current_task = 0; current_task<=crt_queue_size; current_task++)
	{
		/*if end of the queue go back to the beginning*/
		if(crt_queue_size == current_task)
 33e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <crt_queue_size>
 342:	8e 11       	cpse	r24, r14
 344:	35 c0       	rjmp	.+106    	; 0x3b0 <RTSRun+0xb6>
		current_task = 0;
 346:	e1 2c       	mov	r14, r1
 348:	33 c0       	rjmp	.+102    	; 0x3b0 <RTSRun+0xb6>
{
	//UARTTransmitByte('H');
	if(RTSTaskState == Timeout)
	{
		//Task has taken too long!
		UARTTransmitByte('E');
 34a:	85 e4       	ldi	r24, 0x45	; 69
 34c:	97 d0       	rcall	.+302    	; 0x47c <UARTTransmitByte>
 34e:	1d c0       	rjmp	.+58     	; 0x38a <RTSRun+0x90>
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
	{
		if(RTSTaskState == Timeout)
 350:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <RTSTaskState>
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	11 f4       	brne	.+4      	; 0x35c <RTSRun+0x62>
		{
			task->task_state = Finished;
 358:	bf 82       	std	Y+7, r11	; 0x07
 35a:	17 c0       	rjmp	.+46     	; 0x38a <RTSRun+0x90>
 35c:	28 2d       	mov	r18, r8
 35e:	39 2d       	mov	r19, r9
 360:	4a 2d       	mov	r20, r10
 362:	50 2f       	mov	r21, r16
 364:	61 2f       	mov	r22, r17
 366:	7b 2f       	mov	r23, r27
 368:	8f 2f       	mov	r24, r31
 36a:	9e 2f       	mov	r25, r30
 36c:	af 2d       	mov	r26, r15
 36e:	90 d0       	rcall	.+288    	; 0x490 <__adddi3_s8>
 370:	82 2e       	mov	r8, r18
 372:	93 2e       	mov	r9, r19
 374:	a4 2e       	mov	r10, r20
 376:	05 2f       	mov	r16, r21
 378:	16 2f       	mov	r17, r22
 37a:	b7 2f       	mov	r27, r23
 37c:	f8 2f       	mov	r31, r24
 37e:	e9 2f       	mov	r30, r25
		return Error;	
	}
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
 380:	a0 e0       	ldi	r26, 0x00	; 0
 382:	92 d0       	rcall	.+292    	; 0x4a8 <__cmpdi2_s8>
 384:	29 f7       	brne	.-54     	; 0x350 <RTSRun+0x56>
			return Success;
		}
	}
	
	//We should never get to this point, unless the scheduler has failed.
	UARTTransmitByte('F');
 386:	86 e4       	ldi	r24, 0x46	; 70
 388:	79 d0       	rcall	.+242    	; 0x47c <UARTTransmitByte>
 38a:	e3 94       	inc	r14
{
	//Do next job.
	int8_t current_task = 0;

    /*run forever, current_task will be reset before exceeding task_queue_size*/
	for(current_task = 0; current_task<=crt_queue_size; current_task++)
 38c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <crt_queue_size>
 390:	8e 15       	cp	r24, r14
 392:	ac f6       	brge	.-86     	; 0x33e <RTSRun+0x44>
 394:	2b c0       	rjmp	.+86     	; 0x3ec <RTSRun+0xf2>
 396:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <RTSTaskState>
	
	//Avoid infinite loop lockup.
	int64_t cnt;
	for(cnt = 0; cnt < INT64_MAX; cnt++)
	{
		if(RTSTaskState == Timeout)
 39a:	83 30       	cpi	r24, 0x03	; 3
 39c:	e9 f2       	breq	.-70     	; 0x358 <RTSRun+0x5e>
 39e:	8c 2c       	mov	r8, r12
 3a0:	9f 2c       	mov	r9, r15
 3a2:	af 2c       	mov	r10, r15
 3a4:	0f 2d       	mov	r16, r15
 3a6:	1f 2d       	mov	r17, r15
 3a8:	bf 2d       	mov	r27, r15
 3aa:	ff 2d       	mov	r31, r15
 3ac:	e7 2d       	mov	r30, r7
 3ae:	d0 cf       	rjmp	.-96     	; 0x350 <RTSRun+0x56>
 3b0:	ee 2d       	mov	r30, r14
	{
		/*if end of the queue go back to the beginning*/
		if(crt_queue_size == current_task)
		current_task = 0;

		RTSRunTask(task_queue[current_task]);
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 0b       	sbc	r31, r31
 3b6:	ec 5f       	subi	r30, 0xFC	; 252
 3b8:	fd 4f       	sbci	r31, 0xFD	; 253
 3ba:	c0 81       	ld	r28, Z
 3bc:	d1 81       	ldd	r29, Z+1	; 0x01
 3be:	89 81       	ldd	r24, Y+1	; 0x01
}

static void RTSRunTask(volatile task_t* task)
{
	//Run for number of ticks corresponding to task.
	tick_countdown = task->ticks;
 3c0:	9a 81       	ldd	r25, Y+2	; 0x02
 3c2:	ab 81       	ldd	r26, Y+3	; 0x03
 3c4:	bc 81       	ldd	r27, Y+4	; 0x04
 3c6:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <tick_countdown>
 3ca:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <tick_countdown+0x1>
 3ce:	a0 93 cf 02 	sts	0x02CF, r26	; 0x8002cf <tick_countdown+0x2>
 3d2:	b0 93 d0 02 	sts	0x02D0, r27	; 0x8002d0 <tick_countdown+0x3>
 3d6:	df 82       	std	Y+7, r13	; 0x07
	task->task_state = Running;
 3d8:	d0 92 cc 02 	sts	0x02CC, r13	; 0x8002cc <RTSTaskState>
	RTSTaskState = Running;
 3dc:	ed 81       	ldd	r30, Y+5	; 0x05
	
	task->task_cbf();
 3de:	fe 81       	ldd	r31, Y+6	; 0x06
 3e0:	19 95       	eicall
 3e2:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <RTSTaskState>

//internal helper function.
static int8_t waitForTask(volatile task_t* task)
{
	//UARTTransmitByte('H');
	if(RTSTaskState == Timeout)
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	b1 f6       	brne	.-84     	; 0x396 <RTSRun+0x9c>
 3ea:	af cf       	rjmp	.-162    	; 0x34a <RTSRun+0x50>
 3ec:	df 91       	pop	r29
		if(crt_queue_size == current_task)
		current_task = 0;

		RTSRunTask(task_queue[current_task]);
	}
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	cf 90       	pop	r12
 3fc:	bf 90       	pop	r11
 3fe:	af 90       	pop	r10
 400:	9f 90       	pop	r9
 402:	8f 90       	pop	r8
 404:	7f 90       	pop	r7
 406:	08 95       	ret

00000408 <sonarRead>:
#include "../include/i2cDriver.h"
#include "../include/sonarDriver.h"
#include "../include/UARTDriver.h"

void sonarRead(uint16_t* buf)
{
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	1f 92       	push	r1
 412:	1f 92       	push	r1
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	8c 01       	movw	r16, r24
	uint8_t temp[2] = {0};
 41a:	1a 82       	std	Y+2, r1	; 0x02
 41c:	19 82       	std	Y+1, r1	; 0x01
	i2cStart();
 41e:	92 de       	rcall	.-732    	; 0x144 <i2cStart>
	i2cWrite(225);
 420:	81 ee       	ldi	r24, 0xE1	; 225
 422:	99 de       	rcall	.-718    	; 0x156 <i2cWrite>
	i2cReceive(temp, 2);
 424:	62 e0       	ldi	r22, 0x02	; 2
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
	i2cStop();
 42a:	a0 de       	rcall	.-704    	; 0x16c <i2cReceive>
 42c:	cb de       	rcall	.-618    	; 0x1c4 <i2cStop>

	*buf = (temp[0]<<8) | temp[1];
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	98 2f       	mov	r25, r24
 434:	88 27       	eor	r24, r24
 436:	2a 81       	ldd	r18, Y+2	; 0x02
 438:	82 2b       	or	r24, r18
 43a:	f8 01       	movw	r30, r16
 43c:	91 83       	std	Z+1, r25	; 0x01
 43e:	80 83       	st	Z, r24

	//TODO: Husk at checke ny data io pin!!!(Eller bare bede den læse hver anden gang? Eller begge? Nok begge.
	//TODO: Husk at sensoren også bruger tid på at starte op (Og sender på den pin!)
}
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	08 95       	ret

0000044e <sonarDoRangeCheckNow>:

void sonarDoRangeCheckNow()
{
		i2cStart();
 44e:	7a de       	rcall	.-780    	; 0x144 <i2cStart>
		i2cWrite(224); //CHECK TO SEE IF START WAS SENT??
 450:	80 ee       	ldi	r24, 0xE0	; 224
 452:	81 de       	rcall	.-766    	; 0x156 <i2cWrite>
		i2cWrite(81);  //Range check command byte.
 454:	81 e5       	ldi	r24, 0x51	; 81
 456:	7f de       	rcall	.-770    	; 0x156 <i2cWrite>
		i2cStop();
 458:	b5 ce       	rjmp	.-662    	; 0x1c4 <i2cStop>
 45a:	08 95       	ret

0000045c <UARTSetup>:
 45c:	80 e2       	ldi	r24, 0x20	; 32
 #define Error  -1
 #define XTAL 16000000

 void UARTSetup()
 {
	UCSR0A = 0b00100000;
 45e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = 0b00011000;
 462:	88 e1       	ldi	r24, 0x18	; 24
 464:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = 0b00000110;
 468:	86 e0       	ldi	r24, 0x06	; 6
 46a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>

	UBRR0 = 103;
 46e:	87 e6       	ldi	r24, 0x67	; 103
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 476:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 47a:	08 95       	ret

0000047c <UARTTransmitByte>:
 }

 int8_t UARTTransmitByte(uint8_t byte)
 {
	if((UCSR0A & (1<<UDRE0)) != 0)
 47c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 480:	95 ff       	sbrs	r25, 5
 482:	04 c0       	rjmp	.+8      	; 0x48c <UARTTransmitByte+0x10>
	{
		UDR0 = byte;
 484:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

		return Success;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
	}

	return Error;
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	08 95       	ret

00000490 <__adddi3_s8>:
 490:	00 24       	eor	r0, r0
 492:	a7 fd       	sbrc	r26, 7
 494:	00 94       	com	r0
 496:	2a 0f       	add	r18, r26
 498:	30 1d       	adc	r19, r0
 49a:	40 1d       	adc	r20, r0
 49c:	50 1d       	adc	r21, r0
 49e:	60 1d       	adc	r22, r0
 4a0:	70 1d       	adc	r23, r0
 4a2:	80 1d       	adc	r24, r0
 4a4:	90 1d       	adc	r25, r0
 4a6:	08 95       	ret

000004a8 <__cmpdi2_s8>:
 4a8:	00 24       	eor	r0, r0
 4aa:	a7 fd       	sbrc	r26, 7
 4ac:	00 94       	com	r0
 4ae:	2a 17       	cp	r18, r26
 4b0:	30 05       	cpc	r19, r0
 4b2:	40 05       	cpc	r20, r0
 4b4:	50 05       	cpc	r21, r0
 4b6:	60 05       	cpc	r22, r0
 4b8:	70 05       	cpc	r23, r0
 4ba:	80 05       	cpc	r24, r0
 4bc:	90 05       	cpc	r25, r0
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
